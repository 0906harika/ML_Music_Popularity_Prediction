import pandas as pd
import numpy as np
data=pd.read_csv('/content/Spotify_data.csv')
data.head()
print(data.head())
data.drop(columns=["Unnamed: 0"],inplace=True)
data.info()
import matplotlib.pyplot as plt
import seaborn as sns
features=['Energy','Valence','Danceability','Loudness','Acousticness']
for feature in features:
  plt.figure(figsize=(8,5))
  sns.scatterplot(data=data,x=feature,y='Popularity')
  plt.title(f'Popularity vs {feature}')
  plt.show()
numeric_columns=data.select_dtypes(include=['float64','int64']).columns
numeric_data=data[numeric_columns]
corr_matrix=numeric_data.corr()
plt.figure(figsize=(12,8))
sns.heatmap(corr_matrix,annot=True,cmap='coolwarm',fmt='0.2f',linewidths=0.5)
plt.title('Correlation Matrix')
plt.show()
for feature in features:
  plt.figure(figsize=(8,5))
  sns.histplot(data[feature],kde=True)
  plt.title(f'Distribution vs {feature}')
  plt.show()
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error,r2_score
from sklearn.model_selection import GridSearchCV
features=['Energy','Valence','Danceability','Loudness','Acousticness','Tempo','Speechiness','Liveness']
x=data[features]
y=data['Popularity']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)
scaler=StandardScaler()
x_train_scaled=scaler.fit_transform(x_train)
x_test_scaled=scaler.transform(x_test)
param_grid={
    'n_estimators' : [50,100,150],
    'max_features' : ['auto','sqrt','log2'],
    'max_depth' : [10,20,30,None],
    'min_samples_split' : [2,5,10],
    'min_samples_leaf' : [1,2,4]
}
grid_search_rf = GridSearchCV(RandomForestRegressor(random_state=42), param_grid, cv=5, refit=True, verbose=1) # verbose should be an integer
grid_search_rf.fit(x_train_scaled, y_train)
best_params_rf = grid_search_rf.best_params_
best_model_rf = grid_search_rf.best_estimator_
y_pred_best_rf = best_model_rf.predict(x_test_scaled)
y_pred_best_rf=best_model_rf.predict(x_test_scaled)
plt.figure(figsize=(10,6))
plt.scatter(y_test,y_pred_best_rf,alpha=0.7)
plt.plot([min(y_test),max(y_test)],[min(y_test),max(y_test)],color='red',linewidth=2)
plt.xlabel('Actual Popularity')
plt.ylabel('Predicted Popularity')
plt.title('Actual vs Predicted Popularity (Best Random Forest Model)')
plt.show()
